// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RealWorld.Api.Data;

#nullable disable

namespace RealWorldApi.Migrations
{
    [DbContext(typeof(RealWorldDataContext))]
    [Migration("20221002162637_AddUserImage")]
    partial class AddUserImage
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ARTICLES_TAGS", b =>
                {
                    b.Property<string>("ArticleSlug")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("TagName")
                        .HasColumnType("VARCHAR(250)");

                    b.HasKey("ArticleSlug", "TagName");

                    b.HasIndex("TagName");

                    b.ToTable("ARTICLES_TAGS");
                });

            modelBuilder.Entity("FAVORITES", b =>
                {
                    b.Property<string>("ArticleSlug")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<int>("FavoritedBy")
                        .HasColumnType("INT");

                    b.HasKey("ArticleSlug", "FavoritedBy");

                    b.HasIndex("FavoritedBy");

                    b.ToTable("FAVORITES");
                });

            modelBuilder.Entity("FOLLOWERS", b =>
                {
                    b.Property<int>("Follow")
                        .HasColumnType("INT");

                    b.Property<int>("FollowedBy")
                        .HasColumnType("INT");

                    b.HasKey("Follow", "FollowedBy");

                    b.HasIndex("FollowedBy");

                    b.ToTable("FOLLOWERS");
                });

            modelBuilder.Entity("RealWorld.Api.Models.ArticleModel", b =>
                {
                    b.Property<string>("Slug")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<int>("AuthorId")
                        .HasColumnType("INT");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("DATETIMEOFFSET");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("VARCHAR(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("DATETIMEOFFSET");

                    b.HasKey("Slug");

                    b.HasIndex("AuthorId");

                    b.ToTable("ARTICLE", (string)null);
                });

            modelBuilder.Entity("RealWorld.Api.Models.CommentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ArticleSlug")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<int>("AuthorId")
                        .HasColumnType("INT");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("VARCHAR(500)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("DATETIMEOFFSET");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("DATETIMEOFFSET");

                    b.HasKey("Id");

                    b.HasIndex("ArticleSlug");

                    b.HasIndex("AuthorId");

                    b.ToTable("COMMENTS", (string)null);
                });

            modelBuilder.Entity("RealWorld.Api.Models.TagModel", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(250)");

                    b.HasKey("Name");

                    b.ToTable("TAGS", (string)null);
                });

            modelBuilder.Entity("RealWorld.Api.Models.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Bio")
                        .HasColumnType("VARCHAR(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("Image")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("USERS", (string)null);
                });

            modelBuilder.Entity("ARTICLES_TAGS", b =>
                {
                    b.HasOne("RealWorld.Api.Models.ArticleModel", null)
                        .WithMany()
                        .HasForeignKey("ArticleSlug")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RealWorld.Api.Models.TagModel", null)
                        .WithMany()
                        .HasForeignKey("TagName")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("FAVORITES", b =>
                {
                    b.HasOne("RealWorld.Api.Models.ArticleModel", null)
                        .WithMany()
                        .HasForeignKey("ArticleSlug")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RealWorld.Api.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("FavoritedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("FOLLOWERS", b =>
                {
                    b.HasOne("RealWorld.Api.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("Follow")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RealWorld.Api.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("FollowedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("RealWorld.Api.Models.ArticleModel", b =>
                {
                    b.HasOne("RealWorld.Api.Models.UserModel", "Author")
                        .WithMany("Articles")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("RealWorld.Api.Models.CommentModel", b =>
                {
                    b.HasOne("RealWorld.Api.Models.ArticleModel", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleSlug")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RealWorld.Api.Models.UserModel", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("RealWorld.Api.Models.ArticleModel", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("RealWorld.Api.Models.UserModel", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
